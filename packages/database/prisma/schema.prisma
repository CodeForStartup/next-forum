generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id                                       String       @id @default(cuid())
  createdAt                                DateTime     @default(now())
  updatedAt                                DateTime     @updatedAt
  title                                    String       @db.VarChar(255)
  content                                  String?
  slug                                     String       @unique @db.VarChar(255)
  authorId                                 String
  parentPostId                             String?
  pinned                                   Boolean      @default(false)
  userPinned                               Boolean      @default(false)
  postType                                 PostType     @default(POST)
  postStatus                               PostStatus   @default(DRAFT)
  postFormat                               PostFormat   @default(STANDARD)
  totalComment                             Int          @default(0)
  totalFollow                              Int          @default(0)
  totalLike                                Int          @default(0)
  totalShare                               Int          @default(0)
  totalView                                Int          @default(0)
  imageId                                  String?
  Comment                                  Comment[]
  ParentPost_ParentPost_parentPostIdToPost ParentPost[] @relation("ParentPost_parentPostIdToPost")
  ParentPost_ParentPost_postIdToPost       ParentPost[] @relation("ParentPost_postIdToPost")
  author                                   User         @relation(fields: [authorId], references: [id])
  Image                                    Image?       @relation(fields: [imageId], references: [id])
  postOnUser                               PostOnUser[]
  tagOnPost                                TagOnPost[]
}

model PostOnUser {
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  postId    String
  type      PostOnUserType @default(LIKE)
  post      Post           @relation(fields: [postId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@id([userId, postId, type])
}

model PostContentType {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique @db.VarChar(255)
  slug        String   @unique @db.VarChar(255)
  description String?
}

model PostMetaData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  userType       UserType        @default(AUTHOR)
  username       String?         @unique
  bio            String?
  website        String?
  address        String?
  phone          String?
  twitter        String?
  facebook       String?
  github         String?
  youtube        String?
  linkedin       String?
  instagram      String?
  totalFollower  Int             @default(0)
  totalFollowing Int             @default(0)
  totalPost      Int             @default(0)
  totalView      Int             @default(0)
  password       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  accounts       Account[]
  comment        Comment[]
  commentOnUser  CommentOnUser[]
  followers      Follower[]      @relation("follower")
  followings     Follower[]      @relation("following")
  Image          Image[]
  post           Post[]
  postMetaData   PostMetaData[]
  postOnUser     PostOnUser[]
  sessions       Session[]
}

model Follower {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  followerId  String
  followingId String
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model TagOnPost {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  tagId     String
  post      Post     @relation(fields: [postId], references: [id])
  tag       Tags     @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Tags {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  type           TagType     @default(TAG)
  name           String      @unique @db.VarChar(255)
  slug           String      @unique @db.VarChar(255)
  description    String?
  parent         String?     @db.VarChar(255)
  count          Int         @default(0)
  totalFollowers Int         @default(0)
  totalLike      Int         @default(0)
  totalPost      Int         @default(0)
  totalView      Int         @default(0)
  imageId        String?
  tagOnPost      TagOnPost[]
  Image          Image?      @relation(fields: [imageId], references: [id])
}

model Comment {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  content         String?
  authorId        String
  parentCommentId String?
  pinned          Boolean         @default(false)
  commentOnPostId String
  author          User            @relation(fields: [authorId], references: [id])
  commentOnPost   Post            @relation(fields: [commentOnPostId], references: [id])
  CommentOnUser   CommentOnUser[]
}

model CommentOnUser {
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String
  commentId String
  type      CommentOnUserType @default(LIKE)
  comment   Comment           @relation(fields: [commentId], references: [id])
  user      User              @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Image {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  path       String
  name       String
  hash       String
  ext        String
  width      Int
  height     Int
  format     String
  previewUrl String?
  caption    String?
  url        String
  mime       String
  userId     String
  User       User     @relation(fields: [userId], references: [id])
  Post       Post[]
  Tags       Tags[]
}

model ParentPost {
  createdAt                          DateTime @default(now())
  updatedAt                          DateTime
  parentPostId                       String
  postId                             String
  Post_ParentPost_parentPostIdToPost Post     @relation("ParentPost_parentPostIdToPost", fields: [parentPostId], references: [id])
  Post_ParentPost_postIdToPost       Post     @relation("ParentPost_postIdToPost", fields: [postId], references: [id])

  @@id([parentPostId, postId])
}

enum PostType {
  POST
  PAGE
  LIST
  COMPARE
  POLL
  QUIZ
  WIDGET
  ORGANIZATION
  SLIDE
}

enum TagType {
  TAG
  CATEGORY
}

enum PostFormat {
  STANDARD
  ASIDE
  CHAT
  GALLERY
  LINK
  IMAGE
  QUOTE
  STATUS
  VIDEO
  AUDIO
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum PostOnUserType {
  LIKE
  FAVORITE
  FOLLOW
  BOOKMARK
  PINNED
}

enum CommentOnUserType {
  LIKE
  FAVORITE
  FOLLOW
  BOOKMARK
  PINNED
}

enum UserType {
  ADMIN
  MODERATOR
  AUTHOR
}
