// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  POST
  PAGE
  LIST
  COMPARE
  POLL
}

enum PostFormat {
  STANDARD
  ASIDE
  CHAT
  GALLERY
  LINK
  IMAGE
  QUOTE
  STATUS
  VIDEO
  AUDIO
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String  @db.VarChar(255)
  content String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  postType   PostType   @default(POST)
  postStatus PostStatus @default(DRAFT)

  postContent       PostContent[]
  postContentOnPost PostContentOnPost[]
  pagOnPost         TagOnPost[]

  postFormat PostFormat   @default(STANDARD)
  postOnUser PostOnUser[]
}

model PostContentOnPost {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  postContentId String
  postContent   PostContent @relation(fields: [postContentId], references: [id])

  @@id([postId, postContentId])
}

enum PostOnUserType {
  LIKE
  FAVORITE
  FOLLOW
  BOOKMARK
}

model PostOnUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  type PostOnUserType @default(LIKE)

  @@id([userId, postId])
}

model PostContent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String  @db.VarChar(255)
  content String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  post              Post?               @relation(fields: [postId], references: [id])
  postId            String?
  postContentOnPost PostContentOnPost[]
}

model PostContentType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique @db.VarChar(255)
  slug        String  @unique @db.VarChar(255)
  description String?
}

model PostMetaData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String  @db.VarChar(255)
  content String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  post         Post[]
  postContent  PostContent[]
  postMetaData PostMetaData[]
  postOnUser   PostOnUser[]
}

model TagOnPost {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  tagId String
  tag   Tags   @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Tags {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String      @unique @db.VarChar(255)
  slug        String      @unique @db.VarChar(255)
  description String?
  parent      String?     @db.VarChar(255)
  count       Int         @default(0)
  tagOnPost   TagOnPost[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
